プロジェクト名: レセプト理由書アシスタント バックエンド Supabase移行計画
バージョン: 1.1
最終更新日: 2025-05-14 # 現在の日付

概要:
  現在のFirebase + PostgreSQL + Prisma + Express.jsベースのバックエンドシステムを、Supabaseプラットフォームへ移行するための計画。
  主な目的は、Supabaseの統合された機能セット（データベース、認証、ストレージ等）を活用し、開発効率とスケーラビリティを向上させること。

前提条件:
  - Supabaseプロジェクトが作成済みであること。
  - 開発チームがSupabaseの基本的な概念と機能について理解していること。
  - 既存のソースコード (アップロードされた `backend` フォルダ) へのアクセス権があること。

移行フェーズ:

  - フェーズ1: 準備と調査
    期間: 1-2週間
    担当: 開発チームリーダー、バックエンド開発者
    タスク:
      - タスク1.1: Supabase機能評価とマッピング
        詳細:
          - 現在のFirebase/PostgreSQL機能とSupabaseの対応機能を詳細にマッピング。
          - Supabase Auth, Database, Storage, Edge Functions, Realtimeの利用可能性を評価。
        成果物: 機能マッピングドキュメント
        編集ファイル: 特になし (ドキュメント作成)
        工数見積もり: 中
        ステータス: 未完了

      - タスク1.2: 既存システムの分析
        詳細:
          - 認証ロジック (`app/modules/auth/`, `app/middleware/auth.middleware.ts`) の詳細確認。
          - Prismaスキーマ (`package.json` の `prisma.schema` で指定されたパス、例: `src/app/database/prisma/schema.prisma`) とSupabase DBの互換性確認。
          - データベース構造とデータ量、移行方法の検討。
          - 環境変数 (`app/config/index.ts`) の洗い出しとSupabase用設定の準備。
        成果物: システム分析レポート、移行戦略案
        閲覧ファイル:
          - `backend/app/modules/auth/**`
          - `backend/app/middleware/auth.middleware.ts`
          - `backend/package.json` (Prismaスキーマパス確認のため)
          - (想定) `backend/src/app/database/prisma/schema.prisma`
          - `backend/app/config/index.ts`
        工数見積もり: 中
        ステータス: 未完了

      - タスク1.3: 開発環境整備
        詳細:
          - Supabase CLIのセットアップとローカル開発環境構築。
          - 必要なSupabaseクライアントライブラリ (`@supabase/supabase-js` 等) の選定と `package.json` への追加検討。
        成果物: ローカル開発環境、Supabaseクライアントライブラリの導入
        編集ファイル:
          - `backend/package.json`
          - (新規) Supabase CLI関連設定ファイル (プロジェクトルートに生成される場合あり)
        工数見積もり: 低
        ステータス: 未完了

  - フェーズ2: データベース移行
    期間: 1-2週間
    担当: バックエンド開発者、データベース管理者 (該当する場合)
    タスク:
      - タスク2.1: Supabaseデータベーススキーマ設定
        詳細:
          - 既存のPrismaスキーマを元に、Supabaseデータベースのテーブル、リレーション、ポリシーを設定。
          - 必要に応じてPrismaマイグレーションを調整・実行。
        成果物: Supabaseデータベーススキーマ
        編集ファイル:
          - (想定) `backend/src/app/database/prisma/schema.prisma`
          - `backend/app/database/prisma/migrations/**` (既存マイグレーションの調整や新規作成)
        工数見積もり: 中
        ステータス: 未完了

      - タスク2.2: データ移行
        詳細:
          - 既存PostgreSQLからSupabase PostgreSQLへのデータエクスポート/インポート戦略の策定と実行。
          - 小規模データでのテスト移行と検証。
          - 本番データ移行計画の作成。
        成果物: データ移行スクリプト、テストデータ移行結果
        編集ファイル: (新規) データ移行用スクリプトファイル
        工数見積もり: 中～高 (データ量による)
        ステータス: 未完了

      - タスク2.3: アプリケーション接続変更
        詳細:
          - Prismaクライアントの接続情報をSupabaseデータベースに変更 (`DATABASE_URL` の更新)。
          - ローカルおよび開発環境での接続テスト。
        成果物: Supabase DBへの接続確立
        編集ファイル:
          - `.env` (環境変数ファイル、非アップロード)
          - `backend/app/config/index.ts` (環境変数の読み込み方法確認)
          - `backend/app/database/index.ts` (PrismaClient初期化部分、必要に応じて)
        工数見積もり: 低
        ステータス: 未完了

  - フェーズ3: 認証システム移行
    期間: 2-3週間
    担当: バックエンド開発者
    タスク:
      - タスク3.1: Supabase Auth設定
        詳細:
          - Supabaseプロジェクトで認証プロバイダー（メール/パスワード、Google等のソーシャルログイン）を設定。
          - 必要な場合、カスタムクレームやRLS (Row Level Security) の設定。
        成果物: Supabase Auth設定完了
        編集ファイル: 特になし (Supabaseダッシュボードでの設定)
        工数見積もり: 中
        ステータス: 未完了

      - タスク3.2: ユーザーデータ移行 (Firebase AuthからSupabase Authへ)
        詳細:
          - Firebase Authからのユーザーエクスポート方法の調査。
          - Supabase Authへのユーザーインポート方法の確立とスクリプト作成。
          - パスワードハッシュの互換性問題の確認と対応（必要な場合）。
          - テストユーザーでの移行検証。
        成果物: ユーザ移行スクリプト、テストユーザー移行結果
        編集ファイル: (新規) ユーザー移行用スクリプトファイル
        工数見積もり: 高 (複雑度による)
        ステータス: 未完了

      - タスク3.3: バックエンド認証ロジック変更
        詳細:
          - Firebase Admin SDK関連コードの削除/置き換え。
          - 認証ミドルウェアをSupabaseのトークン検証ロジックに書き換え。
          - 認証サービスおよびコントローラーをSupabase Auth SDKを使用するように修正。
          - ユーザー情報取得ロジックをSupabaseのユーザー情報を利用するように変更。
        成果物: 修正された認証関連コード
        編集ファイル:
          - `backend/config/firebaseAdmin.ts` (削除または大幅変更)
          - `backend/config/firebaseAdminSdkConfig.json` (削除)
          - `backend/app/config/firebase.ts` (削除または大幅変更)
          - `backend/app/middleware/auth.middleware.ts` (大幅変更)
          - `backend/app/modules/auth/auth.service.ts` (大幅変更)
          - `backend/app/modules/auth/auth.controller.ts` (変更)
          - `backend/app/modules/auth/auth.types.ts` (必要に応じて更新)
          - `backend/app/modules/users/users.service.ts` (`req.user` の構造変更に伴う修正の可能性)
          - `backend/app/modules/users/users.controller.ts` (同上)
          - `backend/tests/setup.ts` (Firebaseモック削除、Supabaseモック追加)
          - `backend/tests/modules/auth/auth.service.test.ts` (大幅変更)
          - `backend/tests/e2e/auth.e2e-test.ts` (大幅変更)
          - `backend/package.json` (firebase-admin削除、@supabase/supabase-js等追加)
        工数見積もり: 高
        ステータス: 未完了

      - タスク3.4: フロントエンド連携修正 (範囲外だが考慮点)
        詳細:
          - フロントエンドがFirebase SDKで認証を行っている場合、Supabase SDKに置き換える必要がある。
        成果物: (フロントエンドの修正計画)
        編集ファイル: (フロントエンドのコード)
        工数見積もり: (別途見積もり)
        ステータス: 未完了

  - フェーズ4: APIおよびビジネスロジック調整
    期間: 1-3週間 (変更範囲による)
    担当: バックエンド開発者
    タスク:
      - タスク4.1: SupabaseクライアントSDK導入
        詳細:
          - Express.jsバックエンドからSupabaseの機能 (DBクエリ、Auth、Storage等) を利用するための `@supabase/supabase-js` (またはNode.js用Adminクライアント) を導入・設定。
        成果物: Supabase SDKセットアップ完了
        編集ファイル:
          - `backend/package.json`
          - (新規) `backend/app/lib/supabaseClient.ts` (または類似のクライアント初期化ファイル)
          - 各サービスファイルでSupabaseクライアントをインポート・利用
        工数見積もり: 低
        ステータス: 未完了

      - タスク4.2: CRUD操作の見直し
        詳細:
          - Prisma経由のデータアクセスを継続するか、一部をSupabaseクライアント経由に置き換えるか検討。
          - SupabaseのPostgREST APIやRPC (Remote Procedure Calls) の活用を検討。
        成果物: データアクセス戦略の確定と一部実装
        編集ファイル:
          - `backend/app/modules/**/service.ts` (各モジュールのサービスファイル)
          - `backend/app/database/index.ts` (PrismaClientの利用箇所)
        工数見積もり: 中
        ステータス: 未完了

      - タスク4.3: (オプション) Supabase Edge Functionsの活用検討
        詳細:
          - 特定の処理をExpress.jsからSupabase Edge Functionsに移行することのメリット・デメリットを評価。
          - PoC (Proof of Concept) の実施。
        成果物: Edge Functions活用評価レポート
        編集ファイル:
          - (新規) Supabase Edge Functions用ファイル (`supabase/functions/` ディレクトリ以下)
          - `backend/app/routes/index.ts` (Expressルートの変更・削除の可能性)
          - `backend/app/modules/**/{routes.ts, controller.ts, service.ts}` (関連モジュールの変更・削除)
        工数見積もり: 中
        ステータス: 未完了

  - フェーズ5: ストレージ移行 (該当する場合)
    期間: 1週間 (該当する場合)
    担当: バックエンド開発者
    タスク:
      - タスク5.1: Supabase Storage設定
        詳細:
          - バケット作成、アクセスポリシー設定。
        成果物: Supabase Storage設定完了
        編集ファイル: 特になし (Supabaseダッシュボードでの設定)
        工数見積もり: 低
        ステータス: 未完了

      - タスク5.2: ファイル移行とロジック修正
        詳細:
          - 既存ストレージ (例: Firebase Storage) からファイルをSupabase Storageへ移行。
          - ファイルアップロード/ダウンロード関連のロジックを修正。
        成果物: ファイル移行完了、関連コード修正
        編集ファイル:
          - (新規または既存) ファイル操作関連のサービス/コントローラー
        工数見積もり: 中 (ファイル数、サイズによる)
        ステータス: 未完了

  - フェーズ6: テスト
    期間: 2-3週間
    担当: 開発チーム、QAチーム (該当する場合)
    タスク:
      - タスク6.1: ユニットテスト修正・追加
        詳細:
          - 認証、データベースアクセス等、変更箇所に対応するユニットテスト (`tests/` 以下) を修正・追加。
          - Supabaseへのモック戦略の確立。
        成果物: 更新されたユニットテストスイート
        編集ファイル:
          - `backend/tests/**/*.ts`
          - `backend/tests/setup.ts`
        工数見積もり: 中
        ステータス: 未完了

      - タスク6.2: 結合テスト
        詳細:
          - 各モジュール間の連携、APIエンドポイントの動作確認。
        成果物: 結合テスト結果レポート
        編集ファイル: (新規) 結合テスト用スクリプト/定義ファイル
        工数見積もり: 中
        ステータス: 未完了

      - タスク6.3: E2Eテスト
        詳細:
          - 主要なユーザーシナリオに基づいたE2Eテストの実施。
        成果物: E2Eテスト結果レポート
        編集ファイル:
          - `backend/tests/e2e/**/*.e2e-test.ts` (既存テストの修正、新規テスト作成)
        工数見積もり: 中～高
        ステータス: 未完了

  - フェーズ7: デプロイメント準備と実行
    期間: 1-2週間
    担当: 開発チームリーダー、バックエンド開発者、運用担当 (該当する場合)
    タスク:
      - タスク7.1: 環境変数設定
        詳細:
          - 各環境 (開発、ステージング、本番) 向けのSupabase関連環境変数 (`SUPABASE_URL`, `SUPABASE_ANON_KEY`, `SUPABASE_SERVICE_ROLE_KEY` 等) を設定。
        成果物: 環境変数設定完了
        編集ファイル: `.env` (各環境用)、デプロイメントサービスの設定画面
        工数見積もり: 低
        ステータス: 未完了

      - タスク7.2: デプロイメントスクリプト/CI/CD更新
        詳細:
          - `docker-compose.yml` の見直し (ローカルのPostgreSQL依存をSupabase CLIベースに置き換える等)。
          - CI/CDパイプラインをSupabaseデプロイメントに対応するように更新。
        成果物: 更新されたデプロイメント構成
        編集ファイル:
          - `backend/docker-compose.yml`
          - (CI/CD用設定ファイル、例: `.github/workflows/deploy.yml`)
        工数見積もり: 中
        ステータス: 未完了

      - タスク7.3: ステージング環境へのデプロイと最終検証
        詳細:
          - ステージング環境で全機能の動作確認、パフォーマンステスト。
        成果物: ステージング環境検証レポート
        編集ファイル: 特になし (デプロイ作業とテスト実行)
        工数見積もり: 中
        ステータス: 未完了

      - タスク7.4: 本番環境へのデプロイ
        詳細:
          - ダウンタイムを最小限に抑えるためのデプロイ計画の実行。
          - 必要に応じてロールバック計画の準備。
        成果物: 本番環境デプロイ完了
        編集ファイル: 特になし (デプロイ作業)
        工数見積もり: 中
        ステータス: 未完了

  - フェーズ8: 運用と監視
    期間: 移行後継続
    担当: 運用担当、開発チーム
    タスク:
      - タスク8.1: Supabaseプロジェクトの監視設定
        詳細:
          - Supabaseのログ、メトリクス監視。
          - アラート設定。
        成果物: 監視体制確立
        編集ファイル: 特になし (Supabaseダッシュボードまたは監視ツールでの設定)
        工数見積もり: 低
        ステータス: 未完了

      - タスク8.2: ドキュメント更新
        詳細:
          - `README.md` や内部ドキュメントを新しいアーキテクチャに合わせて更新。
        成果物: 更新されたドキュメント
        編集ファイル:
          - `backend/README.md`
          - (その他関連ドキュメント)
        工数見積もり: 低
        ステータス: 未完了

リスクと対策:
  - ユーザーデータ移行の複雑さ:
    対策: 事前の十分な調査とテスト移行。段階的な移行やフォールバックプランの検討。
  - 認証ロジックのバグ混入:
    対策: 徹底的なテスト（ユニット、結合、E2E）。コードレビューの強化。
  - Supabase特有の制約や挙動:
    対策: Supabaseドキュメントの熟読、コミュニティフォーラムの活用、PoCによる早期発見。
  - パフォーマンス問題:
    対策: Supabaseのクエリ最適化、インデックス設定。負荷テストの実施。

備考:
  - この計画はあくまでテンプレートであり、実際のプロジェクトの状況に合わせてカスタマイズが必要です。
  - 各タスクの工数見積もりは相対的なものであり、チームのスキルや経験によって変動します。
  - フロントエンド側の改修は本計画の範囲外としていますが、実際の移行では密接に関連するため、別途計画が必要です。
  - `(想定)` と記載のあるファイルパスは、アップロードされたファイルリストからは直接確認できなかったものの、一般的な構成や`package.json`内の情報から推測されるものです。実際のプロジェクト構成に合わせて確認してください。