プロジェクト名: レセプト理由書アシスタント - バックエンドリファクタリングおよびSupabase最適化計画
バージョン: 1.1 # Firebase移行の最適化を追記したためバージョンアップ
最終更新日: 2025-05-15
責任者: 開発チームリーダー

概要: |
  バックエンドシステムの一部のファイルがReactコンポーネント形式で記述されている問題を解消し、
  Express.jsのAPIサーバーとして適切な構造と機能を持つようにリファクタリングする。
  同時に、FirebaseからSupabaseへのプラットフォーム移行を前提とし、
  Supabaseの機能を最大限に活用するための最適化を行う。
  これにより、システムの安定性、保守性、拡張性、および開発効率を向上させる。
  この計画は doc/conect.yaml のタスクID: T010 の詳細化と、spabase.yaml の移行計画との連携を強化するものである。

前提条件:
  - Express.js、TypeScript、Node.jsの基本的な知識。
  - 既存のバックエンドコードベースへのアクセス。
  - Prisma ORM および Zod バリデーションライブラリの理解。
  - Supabaseの基本的な概念（Auth, Database, Storage, Edge Functions）の理解。

全体方針:
  - 対象ファイルを特定し、Express.jsの標準的な構成（ルーター、コントローラー、サービス、ミドルウェア、ユーティリティ）に従ってリファクタリングする。
  - Firebase依存のロジックをSupabaseクライアントSDKまたはSupabaseの機能を利用したロジックに置き換える。
  - 既存の正常に機能しているExpressロジック（例: `backend/app.ts` [cite: uploaded:ifs1991/receipt_maker/Receipt_maker-022d524fe93977defb65ffd9318e217635709c57/backend/app/app.ts]）との整合性を確保する。
  - 型定義 (`*.types.ts`) とバリデーションスキーマ (`*.validator.ts`) は、ExpressのAPIに適した形に維持・修正する。
  - 修正後は、関連するAPIエンドポイントの動作確認と、単体テスト・結合テストを実施する。

凡例:
  ステータス:
    - not_started: 未着手
    - in_progress: 進行中
    - completed: 完了
    - on_hold: 保留
  優先度:
    - high: 高
    - medium: 中
    - low: 低

進行表:
  - フェーズ1: 設定ファイルと基本ユーティリティのリファクタリング・Supabase移行準備
    期間: "2025-05-16 - 2025-05-20 (3日間)" # Supabaseクライアント設定タスク追加のため期間調整
    担当: バックエンド開発者A
    タスク:
      - task_id: BRF-001
        description: ESLint設定ファイルの修正
        target_file: backend/.eslintrc.js
        details: |
          - 現状のReactコンポーネント形式の記述を削除し、Node.js/TypeScriptプロジェクト向けの標準的なESLint設定に修正する。
          - `@typescript-eslint/parser` や関連プラグインが正しく設定されていることを確認する。
        成果物: 修正された `.eslintrc.js`
        優先度: high
        ステータス: completed

      - task_id: BRF-002 # 更新: Supabase移行を意識した記述に変更
        description: Firebase関連設定の見直しとSupabaseクライアント初期設定準備
        target_files:
          - backend/app/config/firebase.ts
          - backend/config/firebaseAdmin.ts
          - "(新規) backend/app/lib/supabaseClient.ts"
        details: |
          - `backend/app/config/firebase.ts` のReactコンポーネント形式の記述を削除する。
          - `backend/config/firebaseAdmin.ts` のFirebase Admin SDK初期化ロジックは、Supabase移行後は不要になるため、削除またはアーカイブ対象としてマークする。
          - Supabaseへの接続情報（URL、anonキー、サービスロールキー）を環境変数 (`backend/app/config/index.ts` [cite: uploaded:ifs1991/receipt_maker/Receipt_maker-022d524fe93977defb65ffd9318e217635709c57/backend/app/config/index.ts] で定義）から読み込み、Supabaseクライアント (`@supabase/supabase-js`) を初期化するユーティリティ (`supabaseClient.ts` [cite: uploaded:ifs1991/receipt_maker/Receipt_maker-022d524fe93977defb65ffd9318e217635709c57/backend/app/lib/supabaseClient.ts]) を作成・整備する。これは `spabase.yaml` のタスク4.1に相当する。
        成果物: Firebase設定ファイルの整理、`supabaseClient.ts` の整備
        優先度: high
        ステータス: completed

      - task_id: BRF-003
        description: Prismaシードスクリプトの修正
        target_file: backend/app/database/prisma/seeds/seed.ts
        details: |
          - Reactコンポーネント形式の記述を削除する。
          - Prismaの公式ドキュメントに沿ったシードスクリプト形式 (純粋なTypeScript/JavaScript) に修正する。
          - `prisma.$connect()` と `prisma.$disconnect()` を適切に使用する。
          - Supabase環境での実行を考慮し、必要であればSupabaseのユーザーID等と連携するシードデータ構造を検討する。
        成果物: 修正された `seed.ts`
        優先度: medium
        ステータス: completed

  - フェーズ2: ミドルウェアのリファクタリングとSupabase認証への対応
    期間: "2025-05-21 - 2025-05-23 (3日間)" # 認証ミドルウェア修正タスク追加のため期間調整
    担当: バックエンド開発者B
    タスク:
      - task_id: BRF-004
        description: バリデーションミドルウェアの実装確認と修正
        target_file: backend/app/middleware/validation.middleware.ts
        details: |
          - Reactコンポーネント形式の記述を削除する。
          - Expressのミドルウェアとして機能するように、Zodスキーマを受け取りリクエストボディやパラメータを検証する関数ファクトリを実装する。
          - 既存の `users.validator.ts` や `approvalInfo.validator.ts` などで定義されたスキーマと連携できるようにする。
        成果物: 修正・実装された `validation.middleware.ts`
        優先度: high
        ステータス: completed

      - task_id: BRF-005
        description: エラーハンドリングミドルウェアの実装確認と修正
        target_file: backend/app/middleware/errorHandler.middleware.ts
        details: |
          - Reactコンポーネント形式の記述を削除する。
          - Expressのグローバルエラーハンドリングミドルウェアとして機能するように実装する。
          - `HttpError` やZodのエラーなど、異なる種類のエラーを適切に処理し、統一された形式でエラーレスポンスを返すようにする。
        成果物: 修正・実装された `errorHandler.middleware.ts`
        優先度: high
        ステータス: completed

      - task_id: BRF-017 # 新規タスク: Supabase認証ミドルウェアへの移行
        description: 認証ミドルウェアのSupabase Auth対応
        target_file: backend/app/middleware/auth.middleware.ts
        details: |
          - 既存のFirebase Admin SDKベースの認証ロジックを、Supabase AuthのJWT検証ロジックに全面的に書き換える。
          - `Authorization: Bearer <supabase_jwt>` ヘッダーからトークンを抽出し、`supabase.auth.getUser(token)` を使用してユーザー情報を取得・検証する。
          - 検証成功時には `req.user` にSupabaseのユーザー情報（ID、emailなど）を格納する。
          - 検証失敗時には適切なHTTPエラーレスポンス（401 Unauthorizedなど）を返す。
          - これは `spabase.yaml` のタスク3.3に相当する。
        成果物: Supabase Authに対応した `auth.middleware.ts`
        優先度: high
        ステータス: completed
        依存タスク: BRF-002 (Supabaseクライアント設定)

  - フェーズ3: モジュール別リファクタリング (Chatモジュール) とSupabase最適化
    期間: "2025-05-26 - 2025-05-28 (3日間)"
    担当: バックエンド開発者A
    タスク:
      - task_id: BRF-006
        description: Chatモジュールのコントローラー修正
        target_file: backend/app/modules/chat/chat.controller.ts
        details: |
          - Reactコンポーネント形式の記述を削除。
          - Expressのコントローラー関数として実装し、リクエスト処理、サービス呼び出し、レスポンス返却を行う。
          - `req.user` からSupabaseユーザーIDを取得し、サービス層に渡す。
        成果物: 修正された `chat.controller.ts`
        優先度: high
        ステータス: completed
        依存タスク: BRF-017

      - task_id: BRF-007
        description: Chatモジュールのサービス修正とSupabase連携
        target_file: backend/app/modules/chat/chat.service.ts
        details: |
          - Reactコンポーネント形式の記述を削除。
          - ビジネスロジックを担当するサービスクラスまたは関数群として実装する。
          - 外部AIサービスとの連携ロジックを実装する。
          - チャット履歴の保存・取得にPrisma（接続先はSupabase DB）またはSupabaseの機能を活用する。
            (例: Supabase Realtimeと連携してリアルタイムチャットを実現することも将来的には検討可能)
        成果物: 修正された `chat.service.ts`
        優先度: high
        ステータス: completed
        依存タスク: BRF-006

      - task_id: BRF-008
        description: Chatモジュールのルート定義修正
        target_file: backend/app/modules/chat/chat.routes.ts
        details: |
          - Reactコンポーネント形式の記述を削除。
          - `express.Router()` を使用してAPIルートを定義し、コントローラー関数に紐付ける。
          - `BRF-017` で修正された認証ミドルウェアを適用する。
        成果物: 修正された `chat.routes.ts`
        優先度: high
        ステータス: completed
        依存タスク: BRF-006, BRF-017

      - task_id: BRF-009
        description: Chatモジュールの型定義とバリデーター確認
        target_files:
          - backend/app/modules/chat/chat.types.ts
          - backend/app/modules/chat/chat.validator.ts
        details: |
          - APIリクエスト/レスポンスに必要な型定義とZodバリデーションスキーマがExpress APIとして適切であることを確認・修正する。
        成果物: 確認・修正された型定義とバリデーター
        優先度: medium
        ステータス: completed
        依存タスク: BRF-006, BRF-007

  - フェーズ4: モジュール別リファクタリング (SimilarCases, Feedback モジュール) とSupabase最適化
    期間: "2025-05-29 - 2025-06-03 (4日間)"
    担当: バックエンド開発者B
    タスク:
      - task_id: BRF-010
        description: SimilarCasesモジュールのリファクタリングとSupabase連携
        target_files:
          - backend/app/modules/similarCases/similarCases.controller.ts
          - backend/app/modules/similarCases/similarCases.service.ts
          - backend/app/modules/similarCases/similarCases.routes.ts
          - backend/app/modules/similarCases/similarCases.types.ts
          - backend/app/modules/similarCases/similarCases.validator.ts
        details: |
          - Chatモジュールと同様の方針で、各ファイルをExpress.jsの標準形式に修正する。
          - サービス層ではPrisma (接続先はSupabase DB) を使用して類似事例の検索ロジックを実装する。
          - 必要に応じてSupabaseの全文検索機能などの活用を検討する。
        成果物: リファクタリングされたSimilarCasesモジュール
        優先度: medium
        ステータス: completed
        依存タスク: BRF-017

      - task_id: BRF-011
        description: FeedbackモジュールのリファクタリングとSupabase連携
        target_files:
          - backend/app/modules/feedback/feedback.controller.ts
          - backend/app/modules/feedback/feedback.service.ts
          - backend/app/modules/feedback/feedback.routes.ts
          - backend/app/modules/feedback/feedback.types.ts
          - backend/app/modules/feedback/feedback.validator.ts
        details: |
          - Chatモジュールと同様の方針で、各ファイルをExpress.jsの標準形式に修正する。
          - サービス層ではPrisma (接続先はSupabase DB) を使用してフィードバックデータのCRUD操作を実装する。
        成果物: リファクタリングされたFeedbackモジュール
        優先度: medium
        ステータス: completed
        依存タスク: BRF-017

  - フェーズ5: 既存正常コードのSupabase最適化とテスト
    期間: "2025-06-04 - 2025-06-10 (5日間)"
    担当: バックエンド開発者A, バックエンド開発者B
    タスク:
      - task_id: BRF-012 # 更新: Supabase移行を意識した記述に変更
        description: 全体的なコード整合性の確認とSupabase移行に伴う調整
        target_files:
          - backend/app.ts
          - backend/app/routes/index.ts
          - backend/app/modules/approvalInfo/**
          - backend/app/modules/auth/**
          - backend/app/modules/users/**
          - backend/app/modules/returnInfo/**
        details: |
          - リファクタリングされたモジュールと、既存のExpressロジックとして記述されているモジュール (`app.ts`, `approvalInfo.service.ts`, `auth.service.ts` [cite: uploaded:ifs1991/receipt_maker/Receipt_maker-022d524fe93977defb65ffd9318e217635709c57/backend/app/modules/auth/auth.service.ts] など) との間の呼び出しや依存関係に問題がないか確認する。
          - `auth.service.ts` 内のFirebase Admin SDKに依存するユーザー作成・取得ロジックを、Supabase AuthおよびSupabaseクライアント (`supabaseClient.ts`) を使用する形に完全に置き換える。 (spabase.yaml タスク3.3と連携)
          - `users.service.ts` [cite: uploaded:ifs1991/receipt_maker/Receipt_maker-022d524fe93977defb65ffd9318e217635709c57/backend/app/modules/users/users.service.ts] など、他のサービス層でもFirebase UIDに依存している箇所があればSupabaseユーザーID (`req.user.id` など) を使用するように修正する。
          - 全体を通して型定義の整合性を最終確認する。
        成果物: コードレビュー記録、Supabase移行対応済みのコード
        優先度: high
        ステータス: in_progress
        依存タスク: BRF-001 から BRF-011, BRF-017

      - task_id: BRF-013 # 更新: Supabaseモックを意識
        description: テストコードの修正と追加 (Supabase対応)
        target_files: backend/tests/**/*.ts
        details: |
          - Reactコンポーネント形式で記述されているテストファイルを、Jestを使用したバックエンドの単体テスト・結合テストとして修正する。
          - 修正されたAPIエンドポイントやサービスロジックに対するテストケースを追加・更新する。
          - `backend/tests/setup.ts` [cite: uploaded:ifs1991/receipt_maker/Receipt_maker-022d524fe93977defb65ffd9318e217635709c57/backend/tests/setup.ts] のFirebase Admin SDKモックを削除またはコメントアウトし、Supabaseクライアントのモック戦略を確立・実装する。
        成果物: 更新されたテストスイート、テスト実行結果レポート
        優先度: high
        ステータス: completed
        依存タスク: BRF-012

      - task_id: BRF-014
        description: API手動テストと動作確認 (Supabase環境)
        details: |
          - Postmanやcurlなどのツールを使用して、主要なAPIエンドポイントの動作確認を、ローカルのSupabase環境または開発用Supabaseプロジェクトに対して行う。
          - フロントエンドとの連携を想定したテストシナリオを実施する。
        成果物: 手動テスト結果レポート
        優先度: high
        ステータス: in_progress
        依存タスク: BRF-012

  - フェーズ6: Supabase特化機能の活用検討と実装 (オプション)
    期間: "2025-06-11 - 2025-06-13 (3日間)"
    担当: バックエンド開発者A
    タスク:
      - task_id: BRF-018 # 新規タスク
        description: Supabase Storageの活用検討・実装
        details: |
          - 現在ファイルアップロード機能が明確でないが、将来的に必要となる場合を想定し、Supabase Storageの利用を検討する。
          - もし既存でFirebase Storage等を利用していた場合は、その移行計画と実装を行う。
          - ファイルアップロード・ダウンロードAPIを設計・実装する場合、適切なアクセスコントロール (RLS) を設定する。
        成果物: Supabase Storage活用評価、または関連API実装 (該当する場合)
        優先度: low
        ステータス: not_started

      - task_id: BRF-019 # 新規タスク (spabase.yaml タスク4.3と連携)
        description: Supabase Edge Functionsの活用検討
        details: |
          - 特定のAPIエンドポイント（例: 高頻度アクセス、低レイテンシ要求、外部API連携部分）をExpress.jsからSupabase Edge Functionsに移行することのメリットを評価する。
          - 簡単なPoCを実施し、パフォーマンスや開発効率を比較検討する。
          - ChatモジュールのAI連携部分などが候補となり得る。
        成果物: Edge Functions活用評価レポート、PoCコード (該当する場合)
        優先度: low
        ステータス: not_started

  - フェーズ7: ドキュメント更新と最終レビュー
    期間: "2025-06-16 - 2025-06-17 (2日間)"
    担当: 開発チームリーダー
    タスク:
      - task_id: BRF-015
        description: 関連ドキュメントの更新
        target_files:
          - backend/README.md
          - doc/conect.yaml (タスクT010の完了ステータス更新、Supabase移行に伴うAPIエンドポイント変更点の反映など)
          - backend/spabase.yaml (本リファクタリング計画の実施結果を反映)
        details: |
          - リファクタリングおよびSupabase最適化による変更点をドキュメントに正確に反映する。
          - APIの仕様変更があった場合は、フロントエンドチームへの情報共有を行う。
        成果物: 更新されたドキュメント
        優先度: medium
        ステータス: in_progress
        依存タスク: BRF-014 (およびBRF-018, BRF-019が実施された場合)

      - task_id: BRF-016
        description: 全体コードレビューとマージ
        details: |
          - リファクタリングおよびSupabase最適化が施されたコード全体に対して最終レビューを実施する。
          - 品質、一貫性、Supabaseのベストプラクティスへの準拠などを確認する。
          - 問題がなければメインブランチにマージする。
        成果物: マージされたコード
        優先度: high
        ステータス: not_started
        依存タスク: BRF-015

リスクと対策:
  - リスク: リファクタリングによるデグレード発生
    対策: |
      詳細なテスト計画（単体、結合、E2E）と段階的な修正。十分なコードレビュー。影響範囲の小さいモジュールから着手する。
  - リスク: 既存の正常なロジックへの影響
    対策: |
      影響範囲を慎重に調査し、変更は最小限に留める。既存のテストを最大限活用し、不足分は追加する。
  - リスク: Supabaseへの理解不足による実装問題
    対策: |
      Supabase公式ドキュメントの熟読、サンプルコードの参照、チーム内での知識共有。必要に応じて小規模なPoCを実施する。
  - リスク: 認証・認可ロジックの不備
    対策: |
      Supabase Authの仕組みを正確に理解し、RLS (Row Level Security) ポリシーを適切に設計・適用する。テストケースを充実させる。
  - リスク: 見積もり期間の超過
    対策: |
      タスクの再分割や優先順位の見直し。進捗状況を密に共有し、問題点を早期に特定・対処する。必要に応じて追加リソースの検討。

備考: |
  - この計画は、バックエンドのコード形式の問題修正とSupabaseへの最適化に焦点を当てています。データベースのスキーマ移行やデータ移行そのものは `backend/spabase.yaml` の計画に従います。
  - 各タスクの担当者と期間は目安であり、プロジェクトの進捗やチームの状況に応じて柔軟に調整してください。
  - Prismaスキーマ (`schema.prisma`) が提供されていないため、データベース関連の具体的な修正内容はスキーマが確定し次第、詳細を詰める必要があります。
  - フロントエンド側のSupabase SDKへの移行は別途計画が必要です。本計画の成果（API仕様の変更など）はフロントエンドチームと密に連携してください。
